<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fanyer</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 22 Jun 2017 16:30:03 +0800</pubDate>
    <lastBuildDate>Thu, 22 Jun 2017 16:30:03 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Node event loop 扒皮</title>
        <description>&lt;p&gt;时间循环的流程如下&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌───────────────────────┐
┌─&amp;gt;│        timers         │
│  └──────────┬────────────┘
│  ┌──────────┴────────────┐
│  │     I/O callbacks     │
│  └──────────┬────────────┘
│  ┌──────────┴────────────┐
│  │     idle, prepare     │
│  └──────────┬────────────┘      ┌───────────────┐
│  ┌──────────┴────────────┐      │   incoming:   │
│  │         poll          │&amp;lt;─────┤  connections, │
│  └──────────┬────────────┘      │   data, etc.  │
│  ┌──────────┴────────────┐      └───────────────┘
│  │        check          │
│  └──────────┬────────────┘
│  ┌──────────┴────────────┐
└──┤    close callbacks    │
└───────────────────────┘

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;每个phase都维持着一个FIFO的回调函数队列。&lt;/p&gt;

&lt;h3 id=&quot;phases&quot;&gt;Phases&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;timers&lt;/code&gt;: this phase executes callbacks scheduled by setTimeout() and setInterval().&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;I/O callbacks&lt;/code&gt;: executes almost all callbacks with the exception of close callbacks, the ones scheduled by timers, and setImmediate().&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;idle&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;prepare&lt;/code&gt;: only used internally.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;poll&lt;/code&gt;: retrieve new I/O events; node will block here when appropriate.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;check&lt;/code&gt;: setImmediate() callbacks are invoked here.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;close callbacks&lt;/code&gt;: e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;socket.on('close', ...)&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;timer&quot;&gt;timer&lt;/h4&gt;
&lt;p&gt;Technically, the &lt;code class=&quot;highlighter-rouge&quot;&gt;poll&lt;/code&gt; phase controls when timers are executed.&lt;/p&gt;

&lt;h4 id=&quot;i0-callbacks&quot;&gt;I/0 callbacks&lt;/h4&gt;

&lt;p&gt;执行一些系统操作的回调函数，如TCP错误类型。&lt;/p&gt;

&lt;p&gt;eg：当尝试连接时，如果一个TCP套接字收到了&lt;code class=&quot;highlighter-rouge&quot;&gt;ECONNREFUSED&lt;/code&gt;， 一些linux系统可能希望等待错误报告。这将会在本阶段内入队等待执行。&lt;/p&gt;

&lt;h4 id=&quot;poll&quot;&gt;poll&lt;/h4&gt;

&lt;p&gt;本阶段有两个主要功能：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;执行队列里已到期的timer，然后&lt;/li&gt;
  &lt;li&gt;处理poll队列里的事件&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;如果没有timer调度，将会发生以下两种之一：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;如果poll队列不为空，则继续同步迭代器队列内的回调函数直到exhausted或是达到系统硬性限制。&lt;/li&gt;
  &lt;li&gt;如果poll队列为空， 将会发生以下两种之一。
    &lt;ul&gt;
      &lt;li&gt;如果脚本被&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;调度，时间循环将会结束&lt;code class=&quot;highlighter-rouge&quot;&gt;poll&lt;/code&gt;阶段并进入&lt;code class=&quot;highlighter-rouge&quot;&gt;check&lt;/code&gt;阶段执行被调度的脚本。&lt;/li&gt;
      &lt;li&gt;如果脚本不是被&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;调度，事件循环将会等待回调函数加入队列，然后即时之行之。&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;一旦poll队列为空，时间循环会检查到达threshold的timers。如果一个或多个timer ready了，时间循环将会包装会timer阶段执行timer的回调函数。&lt;/p&gt;

&lt;h4 id=&quot;check&quot;&gt;check&lt;/h4&gt;

&lt;p&gt;本阶段允许在poll阶段结束后立即执行callbacks。如果poll阶段转为idle并且被setImmediate()入队，时间循环将直接进入&lt;code class=&quot;highlighter-rouge&quot;&gt;check&lt;/code&gt;阶段而不是等待&lt;code class=&quot;highlighter-rouge&quot;&gt;poll&lt;/code&gt;事件。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;实际上是在事件循环中一个单独的阶段运行的一个特殊的timer。使用一个&lt;code class=&quot;highlighter-rouge&quot;&gt;libuv&lt;/code&gt;的api来调度在poll阶段完成之后的callbacks的执行&lt;/p&gt;

&lt;p&gt;通常来说，在代码执行过程中，事件循环将最终hit到poll阶段（poll阶段也会等待for incoming connection, request，etc）。但如果一个callback被&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;调度并且poll阶段变为idle，it（poll）将直接结束并进入check阶段而非等待poll事件。&lt;/p&gt;

&lt;h4 id=&quot;close-callbacks&quot;&gt;close callbacks&lt;/h4&gt;

&lt;p&gt;如果一个socket或是handle被突然关闭(e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;socket.destroy()&lt;/code&gt;),&lt;code class=&quot;highlighter-rouge&quot;&gt;close&lt;/code&gt;事件将会被emit到本阶段。其他情况将会被emit到&lt;code class=&quot;highlighter-rouge&quot;&gt;process.nextTick()&lt;/code&gt;。&lt;/p&gt;

&lt;hr /&gt;
&lt;h4 id=&quot;setimmediate--vs-settimeout&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;  vs &lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;这两者很相似，但是行为表现不同 depend on 何时调用。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;被设计为在当前poll阶段完成时执行&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt;调度一段脚本在达到minimum的threshold时执行&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;over&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout()&lt;/code&gt;的最主要优点在于：
&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;的执行顺序比任何在&lt;code class=&quot;highlighter-rouge&quot;&gt;I/O&lt;/code&gt;阶段调度的timer高。&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;processnexttick&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process.nextTick()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;任何时候你都可以在一个给定的阶段里调用&lt;code class=&quot;highlighter-rouge&quot;&gt;process.nextTick()&lt;/code&gt;,所有传入&lt;code class=&quot;highlighter-rouge&quot;&gt;process.nextTick()&lt;/code&gt;的callbacks都会在事件循环continue前resolved.这可以创建一些很不好的解决方案，因为你可以利用递归&lt;code class=&quot;highlighter-rouge&quot;&gt;process.nextTick()&lt;/code&gt;手动starve将你的&lt;code class=&quot;highlighter-rouge&quot;&gt;I/O&lt;/code&gt;,这种做法将防止事件循环进入poll阶段。&lt;/p&gt;

&lt;h4 id=&quot;processnexttick-vs-setimmediate&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process.nextTick()&lt;/code&gt; vs &lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;process.nextTick()&lt;/code&gt;在本阶段立即解除&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate()&lt;/code&gt;事件循环中的接下来的iteration或是&lt;code class=&quot;highlighter-rouge&quot;&gt;tick&lt;/code&gt;中解除&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;why-use-processnexttick&quot;&gt;Why use &lt;code class=&quot;highlighter-rouge&quot;&gt;process.nextTick()&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;有两个主要原因：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;允许使用者处理错误，清初任何不必要的资源，或是可能在下次事件循环时尝试再次请求&lt;/li&gt;
  &lt;li&gt;在下次事件循环前，有时候有必要在调用栈释放后，允许一个callback执行&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;ps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;如果可能的话，调用setTimeout时，尽量使用相同的超时值&lt;/li&gt;
  &lt;li&gt;尽量用process.nextTick 来代替 setTimeout(fn ,0)&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 19 Jun 2017 21:28:32 +0800</pubDate>
        <link>http://localhost:4000/2017/06/node8-eventloop/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/06/node8-eventloop/</guid>
        
        <category>event</category>
        
        <category>loop</category>
        
        
      </item>
    
      <item>
        <title>Mybatis explore for taste</title>
        <description>&lt;p&gt;数据库连接池使用的是Druid。Mybatis与spring-boot的集成与mybatis与Spring的集成并没有什么不同的地方。&lt;/p&gt;

&lt;p&gt;可以看这里：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/slowlizard&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;多了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;@ImportResource(&quot;mybatis.xml&quot;)&lt;/code&gt;注解。
如果要引用多个配置，那么就需要自定义配置的引入方式。不然每一个都要去&lt;code class=&quot;highlighter-rouge&quot;&gt;@ImportResource&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 29 May 2017 20:58:15 +0800</pubDate>
        <link>http://localhost:4000/2017/05/mybatis/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/mybatis/</guid>
        
        <category>java</category>
        
        
      </item>
    
      <item>
        <title>NAPI</title>
        <description>&lt;p&gt;Node 7.9之后, C++ Addon有了优雅的写法，需要参考Nan项目,研究了之后发现这也是给写过C++ Addon的人提高效率的，有较多的既定规则，且需要对v8有一定理解。&lt;/p&gt;

&lt;p&gt;新泽西学院有教授即时跟进布道。&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Apr 2017 13:48:52 +0800</pubDate>
        <link>http://localhost:4000/2017/04/NAPI-node/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/NAPI-node/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Tree Shaking</title>
        <description>&lt;p&gt;Rich Harris 的模块打包器 Rollup 普及了 JavaScript 圈内一个重要的特性：Tree-shaking，即从模块包中排除未使用的 exports 项。Rollup 基于 ES6 模块的静态结构（引入和导出不会在运行时改变）来检测哪一个模块没有被使用。&lt;/p&gt;

&lt;p&gt;Webpack 的 Tree-shaking 特性目前正在 beta 阶段，这篇博文解释了它是如何工作的，相关的项目代码可以在 Github 上查看：&lt;a href=&quot;https://github.com/rauschma/tree-shaking-demo&quot;&gt;Tree-shaking Demo&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;1-webpack-2-如何消除未使用的导出&quot;&gt;1. Webpack 2 如何消除未使用的导出&lt;/h3&gt;

&lt;p&gt;Webpack 2 是一个尚处于 beta 阶段的新版本，它通过下面两个步骤来消除未使用的导出:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先，所有 ES6 模块文件会被合并为一个打包文件。在这个文件中在任何地方都没有被引入的导出将不再会被打包（译注：&lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 语句将会直接被删除）。
其次，通过消除不可到达的代码，将打包文件精简。因此，那些既没有被导出，又没有在其模块中被使用的代码将不会出现在精简的打包文件中。如果没有第一个步骤，那些被导出的不可到达代码永远不会被删除（&lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 关键字会访问他们）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;只有模块系统拥有一个静态的结构时，模块加载器才能在构建阶段对没有使用过的 &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 语句进行可靠的检测。因此，Webpack 2 可以解析并且理解所有 ES6 代码，并且仅对检测到的 ES6 模块进行 Tree-shaking。但不管怎样，只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 语句会被 Webpack 转译为 ES5，如果希望所有代码都转译为 ES5，你仍然需要一个转译器对剩余部分的代码进行转译。在这篇博文中，我们会使用 Babel 6。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-输入es6-代码&quot;&gt;2. 输入：ES6 代码&lt;/h3&gt;

&lt;p&gt;Demo 项目有两个 ES6 模块。&lt;/p&gt;

&lt;p&gt;helpers.js 包含辅助函数：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// helpers.js
export function foo() {
  return 'foo';
}
export function bar() {
  return 'bar';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;main.js，web 应用的入口：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// main.js
import { foo } from './helpers';

let elem = document.getElementById('output');
elem.innerHTML = `Output: ${foo()}`;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;需要注意的是在 helpers 模块中导出的 bar 在整个项目的任何地方都没有被使用过。&lt;/p&gt;

&lt;h3 id=&quot;3-不使用-tree-shaking-的输出&quot;&gt;3. 不使用 Tree-shaking 的输出&lt;/h3&gt;

&lt;p&gt;Babel 6 的典型选择是使用 es2015 这个 preset：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;presets:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;['es2015'],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不管怎样，这一 preset 包含了 transform-es2015-modules-commonjs 这个插件，这意味着 Babel 会输出 CommonJS 规范的模块，这时 Webpack 无法进行 Tree-shaking：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function(module, exports) {

  'use strict';

  Object.defineProperty(exports, &quot;__esModule&quot;, {
    value: true
  });
  exports.foo = foo;
  exports.bar = bar;
  function foo() {
    return 'foo';
  }
  function bar() {
    return 'bar';
  }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;你可以看到在代码精简的过程中，&lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; 作为导出的一部分使它不能被识别为不可访问的代码。&lt;/p&gt;

&lt;h3 id=&quot;4-使用-tree-shaking-的输出&quot;&gt;4. 使用 Tree-shaking 的输出&lt;/h3&gt;

&lt;p&gt;我们需要的是 Babel 的 es2015，并不需要其中的 transform-es2015-modules-commonjs 插件。这时，实现以上需求的唯一途径是在配置中声明除 transform-es2015-modules-commonjs 以外的所有的插件。preset 的源代码托管在 Gibhub 上，所以我们这里复制粘贴需要的插件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;plugins:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-template-literals',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-literals',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-function-name',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-arrow-functions',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-block-scoped-functions',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-classes',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-object-super',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-shorthand-properties',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-computed-properties',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-for-of',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-sticky-regex',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-unicode-regex',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'check-es2015-constants',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-spread',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-parameters',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-destructuring',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-block-scoping',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-typeof-symbol',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;['transform-regenerator',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;async:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;false,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;asyncGenerators:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果现在我们构建这个项目，helper 模块在打包文件中看起来就像这样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function(module, exports, __webpack_require__) {

  /* harmony export */ exports[&quot;foo&quot;] = foo;
  /* unused harmony export bar */;

  function foo() {
      return 'foo';
  }
  function bar() {
      return 'bar';
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;现在，只有 foo 被导出了，但 bar 的代码仍然存在。经过代码精简，helpers 看起来就像这样：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function (t, n, r) {
  function e() {
      return &quot;foo&quot;
  }

  n.foo = e
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 23 Mar 2017 23:48:52 +0800</pubDate>
        <link>http://localhost:4000/2017/03/TreeShaking/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/TreeShaking/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>specs of Promise/A+</title>
        <description>&lt;h2 id=&quot;promisea规范&quot;&gt;Promise/A+规范&lt;/h2&gt;

&lt;p&gt;摘录promise.then相关的部分如下：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;promise.then(onFulfilled, onRejected)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;2.2.4 onFulfilled or onRejected must not be called until the execution context stack contains only platform code. [3.1].&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Here “platform code” means engine, environment, and promise implementation code. In practice, this requirement ensures that onFulfilled and onRejected execute asynchronously, after the event loop turn in which then is called, and with a fresh stack. This can be implemented with either a “macro-task” mechanism such as setTimeout or setImmediate, or with a “micro-task” mechanism such as MutationObserver or process.nextTick. Since the promise implementation is considered platform code, it may itself contain a task-scheduling queue or “trampoline” in which the handlers are called.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;规范要求，&lt;code class=&quot;highlighter-rouge&quot;&gt;onFulfilled&lt;/code&gt; 必须在 执行上下文栈（execution context stack） 只包含 平台代码（platform code） 后才能执行。平台代码指 引擎，环境，Promise实现代码。实践上来说，这个要求保证了&lt;code class=&quot;highlighter-rouge&quot;&gt;onFulfilled&lt;/code&gt;的异步执行（以全新的栈），在then被调用的这个事件循环之后。&lt;/p&gt;

&lt;p&gt;规范的实现可以通过 macro-task 机制，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;setTimeout&lt;/code&gt;和 &lt;code class=&quot;highlighter-rouge&quot;&gt;setImmediate&lt;/code&gt;，或者 micro-task 机制，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;MutationObserver&lt;/code&gt; 或者 &lt;code class=&quot;highlighter-rouge&quot;&gt;process.nextTick&lt;/code&gt; 。因为promise的实现被认为是平台代码，所以可以自己包涵一个task-scheduling队列或者trampoline。&lt;/p&gt;

&lt;p&gt;通过对规范的翻译和解读，我们可以确定的是promise.then是异步的，但它的实现又是平台相关的。要继续解答我们的疑问，必须理解下面几个概念：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Event Loop，应该算是一个前置的概念，理解它才能理解浏览器的异步工作流程。&lt;/li&gt;
  &lt;li&gt;macro-task 机制和 micro-task 机制，这组概念很新，之前根本没听过，但却是解决问题的核心。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;event-loop规范&quot;&gt;Event Loop规范&lt;/h3&gt;

&lt;p&gt;HTML5规范里有Event loops这一章节（读起来比较晦涩，只关注相关部分即可）。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;每个浏览器环境，至多有一个event loop。&lt;/li&gt;
  &lt;li&gt;一个event loop可以有1个或多个task queue。&lt;/li&gt;
  &lt;li&gt;一个task queue是一列有序的task，用来做以下工作：Events task，Parsing task， Callbacks task， Using a resource task， Reacting to DOM manipulation task等。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;每个task都有自己相关的document，比如一个task在某个element的上下文中进入队列，那么的document就是这个element的document。&lt;/p&gt;

&lt;p&gt;每个task定义时都有一个task source，从同一个task source来的task必须放到同一个task queue，从不同源来的则被添加到不同队列。&lt;/p&gt;

&lt;p&gt;每个(task source对应的)task queue都保证自己队列的先进先出的执行顺序，但event loop的每个turn，是由浏览器决定从哪个task source挑选task。这允许浏览器为不同的task source设置不同的优先级，比如为用户交互设置更高优先级来使用户感觉流畅。&lt;/p&gt;

&lt;h3 id=&quot;jobs-and-job-queues规范&quot;&gt;Jobs and Job Queues规范&lt;/h3&gt;

&lt;p&gt;本来应该接着上面Event Loop的话题继续深入，讲macro-task和micro-task，但先不急，我们跳到ES2015规范，看看Jobs and Job Queues这一新增的概念，它有点类似于上面提到的task queue。&lt;/p&gt;

&lt;p&gt;一个Job Queue是一个先进先出的队列。一个ECMAScript实现必须至少包含以下两个Job Queue：&lt;/p&gt;

&lt;p&gt;| Name	| Purpose|
| ——–   |   :—-: |
|ScriptJobs |	Jobs that validate and evaluate ECMAScript Script and Module source text. See clauses 10 and 15.|
|PromiseJobs	Jobs | that are responses to the settlement of a Promise (see 25.4).|
单个Job Queue中的PendingJob总是按序（先进先出）执行，但多个Job Queue可能会交错执行。&lt;/p&gt;

&lt;p&gt;跟随PromiseJobs到25.4章节，可以看到PerformPromiseThen ( promise, onFulfilled, onRejected, resultCapability )：&lt;/p&gt;

&lt;p&gt;这里我们看到，promise.then的执行其实是向PromiseJobs添加Job。&lt;/p&gt;

&lt;h3 id=&quot;event-loop怎么处理tasks和microtasks&quot;&gt;event loop怎么处理tasks和microtasks?&lt;/h3&gt;

&lt;p&gt;好了，现在可以让我们真正来深入task（macro-task）和micro-task。&lt;/p&gt;

&lt;p&gt;认真说，规范并没有包括macro-task 和 micro-task这部分概念的描述，但阅读一些大神的博文以及从规范相关概念推测，以下所提到的在我看来，是合理的解释。但是请看文章的同学辩证和批判地看。&lt;/p&gt;

&lt;p&gt;首先，&lt;code class=&quot;highlighter-rouge&quot;&gt;micro-task&lt;/code&gt; 在ES2015规范中称为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Job&lt;/code&gt; 。 其次，&lt;code class=&quot;highlighter-rouge&quot;&gt;macro-task&lt;/code&gt; 代指&lt;code class=&quot;highlighter-rouge&quot;&gt;task&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;哇，所以我们可以结合前面的规范，来讲一讲Event Loop（事件循环）是怎么来处理task和 microtask 的了。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;每个线程有自己的事件循环，所以每个web worker有自己的，所以它才可以独立执行。然而，所有同属一个origin的windows共享一个事件循环，所以它们可以同步交流。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;事件循环不间断在跑，执行任何进入队列的task。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一个事件循环可以有多个task source，每个task source保证自己的任务列表的执行顺序，但由浏览器在（事件循环的）每轮中挑选某个task source的task。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;tasks are scheduled，所以浏览器可以从内部到JS/DOM，保证动作按序发生。在tasks之间，浏览器可能会render updates。从鼠标点击到事件回调需要schedule task，解析html，setTimeout这些都需要。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;microtasks are scheduled，经常是为需要直接在当前脚本执行完后立即发生的事，比如async某些动作但不必承担新开task的弊端。microtask queue在回调之后执行，只要没有其它JS在执行中，并且在每个task的结尾。microtask中添加的microtask也被添加到microtask queue的末尾并处理。microtask包括mutation observer callbacks和promise callbacks。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Sun, 22 Jan 2017 22:38:17 +0800</pubDate>
        <link>http://localhost:4000/2017/01/promise-A+/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/promise-A+/</guid>
        
        <category>webgl</category>
        
        <category>canvas</category>
        
        
      </item>
    
      <item>
        <title>Canvas Profile</title>
        <description>
</description>
        <pubDate>Sun, 22 Jan 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/01/canvas-profile/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/01/canvas-profile/</guid>
        
        
      </item>
    
      <item>
        <title>caches</title>
        <description>&lt;h3 id=&quot;缓存实践&quot;&gt;缓存实践&lt;/h3&gt;
&lt;p&gt;对于各种HTTP缓存控制头部的对比以及用户可能出现的浏览器刷新行为，当我们在一个项目上做http缓存的应用时，我们实际上还是会把可能的大多数首部字段均使用上。&lt;/p&gt;
&lt;h4 id=&quot;1-expires--cache-control&quot;&gt;1. Expires / Cache-Control&lt;/h4&gt;
&lt;p&gt;Expires用时刻来标识失效时间，不免收到时间同步的影响，而Cache-Control使用时间间隔很好的解决了这个问题。 但是 Cache-Control 是 HTTP1.1 才有的，不适用于 HTTP1.0，而 Expires 既适用于 HTTP1.0，也适用于 HTTP1.1，所以说在大多数情况下同时发送这两个头会是一个更好的选择，当客户端两种头都能解析的时候，会优先使用 Cache-Control。&lt;/p&gt;
&lt;h4 id=&quot;2-last-modified--etag&quot;&gt;2. Last-Modified / ETag&lt;/h4&gt;
&lt;p&gt;二者都是通过某个标识值来请求资源， 如果服务器端的资源没有变化，则自动返回 HTTP 304 （Not Changed）状态码，内容为空，这样就节省了传输数据量。而当资源发生比那话后，返回和第一次请求时类似。从而保证不向客户端重复发出资源，也保证当服务器有变化时，客户端能够得到最新的资源。&lt;/p&gt;

&lt;p&gt;其中Last-Modified使用文件最后修改作为文件标识值，它无法处理文件一秒内多次修改的情况，而且只要文件修改了哪怕文件实质内容没有修改，也会重新返回资源内容；ETag作为“被请求变量的实体值”，其完全可以解决Last-Modified头部的问题，但是其计算过程需要耗费服务器资源。&lt;/p&gt;
&lt;h4 id=&quot;3-from-cache--304&quot;&gt;3. from-cache / 304&lt;/h4&gt;
&lt;p&gt;Expires和Cache-Control都有一个问题就是服务端作为的修改，如果还在缓存时效里，那么客户端是不会去请求服务端资源的（非刷新），这就存在一个资源版本不符的问题，而强制刷新一定会发起HTTP请求并返回资源内容，无论该内容在这段时间内是否修改过；而Last-Modified和Etag每次请求资源都会发起请求，哪怕是很久都不会有修改的资源，都至少有一次请求响应的消耗。&lt;/p&gt;

&lt;p&gt;对于所有可缓存资源，指定一个Expires或Cache-Control max-age以及一个Last-Modified或ETag至关重要。同时使用前者和后者可以很好的相互适应。&lt;/p&gt;

&lt;p&gt;前者不需要每次都发起一次请求来校验资源时效性，后者保证当资源未出现修改的时候不需要重新发送该资源。而在用户的不同刷新页面行为中，二者的结合也能很好的利用HTTP缓存控制特性，无论是在地址栏输入URI然后输入回车进行访问，还是点击刷新按钮，浏览器都能充分利用缓存内容，避免进行不必要的请求与数据传输。&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Dec 2016 22:24:49 +0800</pubDate>
        <link>http://localhost:4000/2016/12/cache/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/12/cache/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>calm down Under anxiety</title>
        <description>&lt;h4 id=&quot;anxiety-diary&quot;&gt;anxiety diary&lt;/h4&gt;

&lt;p&gt;我本身有一点心率不齐（高考体测得）&lt;/p&gt;

&lt;p&gt;有些很多未补完的事情，一旦即将deadline, 都会本能地有难以遏制地anxiety。而从前不以为意的items也会一起burst出来, 如果是在家的闲余时间，我会将其转为身体运动来暂时性放逐精神，以免思绪乱飞，譬如弹n个小时的钢琴，或是大学时期的大学城内环4km跑步。身体的运动有抚慰精神的效果。&lt;/p&gt;

&lt;p&gt;如果是在worktime, 则会开始写文档或是日志， 其实也是一部分的身体movements来comfort自己的精神。&lt;/p&gt;

&lt;p&gt;这两种办法其实都是逃避，强制性开启身体消耗以致疲惫使得没有能力焦虑。&lt;/p&gt;

&lt;p&gt;写下这篇日记时，状态是： 如果我将anxiety看作非我，我是否会理会这种“别人的精神状态”。如果真的能分离为非我，我自然很少care我认为没有意义的外物。但就是无法完全分离（否则我将已经是一个精神分裂症患者了），所以导致仍有一丝弱力，依旧是我无法完全摆脱anxiety。&lt;/p&gt;

&lt;p&gt;事实上，我认为没有办法正面against精神上的anxiety的，但是正面和逃避之间有着中间地带。譬如写日记记录某种case下的体系状态（我，非我…），
深呼吸无法长期的生效。&lt;/p&gt;

&lt;p&gt;人是矛盾的，必要的时候还是会靠镇静剂和安眠药使得心率回归平稳。&lt;/p&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 20:17:52 +0800</pubDate>
        <link>http://localhost:4000/2016/11/face-anxiety/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/face-anxiety/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>ucs2 &lt;=&gt; utf8</title>
        <description>&lt;p&gt;之前日志里的的 xss,csrf 有利用&lt;code class=&quot;highlighter-rouge&quot;&gt;ucs-2&lt;/code&gt;进行安全攻击的说明。
有时候需要对其进行&lt;code class=&quot;highlighter-rouge&quot;&gt;utf-8&lt;/code&gt;的转换。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ps： &lt;code class=&quot;highlighter-rouge&quot;&gt;gbk&lt;/code&gt;编码转&lt;code class=&quot;highlighter-rouge&quot;&gt;unicode&lt;/code&gt;需要查表&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一般会有流程&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gbk =&amp;gt; unicode(ucs-2) =&amp;gt; utf-8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;pass gbk流程&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ucs-2&lt;/code&gt;转&lt;code class=&quot;highlighter-rouge&quot;&gt;utf-8&lt;/code&gt; 可以如下实现：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function toUtf8(code) {
    var iByte = 0;
    var i = 0;
    result = &quot;&quot;;
    while (code &amp;gt; 0x7f) {
        iByte = code % 0x40;
        code = (code - iByte) / 0x40;
        result = &quot;%&quot; + (iByte | 0x80).toString(16).toUpperCase() + result;
        i++;
    }
    prefix = [0x0, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc];
    if (i &amp;gt; prefix.length) {
        i = 5;
    }
    result = &quot;&quot; + (code | prefix[i]).toString(16).toUpperCase() + result;
    return result;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;获取unicode则可以如&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;'adea'.charCodeAt(index).toString(16)

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;或是&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;escape('汉')
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;Ps:  escape将被 deprecated&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 02 Nov 2016 20:17:52 +0800</pubDate>
        <link>http://localhost:4000/2016/11/ucs2-utf8/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/11/ucs2-utf8/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>ruby DSL</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://www.leighhalliday.com/creating-ruby-dsl&quot;&gt;Creating a Ruby DSL&lt;/a&gt;归纳笔记&lt;/p&gt;

&lt;p&gt;借用 Creating a Ruby DSL 这篇文章中的例子，假设我们想写一段 HTML 代码:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;pretty&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;active&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Item 1&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;Item 2&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;但又感觉手写代码太麻烦，希望简化它，所以使用一个自创的 DSL:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;html = HTMLMaker.new.document do
  body do
    div id: &quot;container&quot; do
      ul class: &quot;pretty&quot; do
        li &quot;Item 1&quot;, class: :active
        li &quot;Item 2&quot;
      end
    end
  end
end
# 这个 html 变量是一个字符串，值就是上面的 HTML 文档
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在实际开发时，元编程通常以两种形式体现出他的威力:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;提供反射的功能，通过 API 来提供对运行时环境的访问和修改能力
提供执行字符串格式代码的能力&lt;/li&gt;
  &lt;li&gt;在 Ruby 中，我们可以随意为任何一个类添加、修改甚至删除方法。调用不存在方法时，可以统一进行转发:&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class TestMissing
  def method_missing(m, *args, &amp;amp;block)
    puts &quot;方法名：#{m}，参数：#{args}，闭包：#{block}&quot;
  end
end

TestMissing.new.say &quot;Hello&quot;, &quot;World&quot; do
  puts &quot;Hello, world&quot;
end
# 方法名：say，参数：[&quot;Hello&quot;, &quot;World&quot;]，闭包：#&amp;lt;Proc:0x007feeea03cb00@t.ruby:7&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;然后如何利用这个特性来实现dsl&quot;&gt;然后如何利用这个特性来实现dsl&lt;/h4&gt;

&lt;p&gt;首先我们要定义一个 HTMLMaker 类，并且把 document 方法作为入口。这个方法接收一个闭包，闭包中调用 body 函数，这个函数也提供了闭包，闭包中调用了 div 方法，并且有一个参数 id: “container”……&lt;/p&gt;

&lt;p&gt;可见这其实是一个递归调用，无论是 body 还是 div，他们对应着 HTML 标签，其实都是一些并列的方法，方法可以接受若干个键值对，也就是 HTML 中标签的属性，最后再跟上一个闭包用来创建隶属于自己的子标签。&lt;/p&gt;

&lt;p&gt;如果不用 Ruby，我们需要事先知道所有的 HTML 标签名，然后进行匹配，可想工作量有多大。而在 Ruby 中，他们都是并列关系，可以统一转发到 method_missing 方法中，获取方法名、参数和闭包。&lt;/p&gt;

&lt;p&gt;我们首先解析参数，配合方法名拼凑出当前标签的字符串，然后递归调用闭包即可，核心代码如下:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def method_missing(m, *args, &amp;amp;block)
    tag(m, args, &amp;amp;block)
end

def tag(html_tag, args, &amp;amp;block)
  # indent 用来记录行首的空格缩进
  # options 表示解析后的 HTML 属性，比如 id=&quot;container&quot;， content 则是标签中的内容
  html &amp;lt;&amp;lt; &quot;\n#{indent}&amp;lt;#{html_tag}#{options}&amp;gt;#{content}&quot;
  if block_given? # 如果传递了闭包，递归执行
    instance_eval(&amp;amp;block) # 递归执行闭包
    html &amp;lt;&amp;lt; &quot;\n#{indent}&quot;
  end
  html &amp;lt;&amp;lt; &quot;&amp;lt;/#{html_tag}&amp;gt;&quot;
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这里的 instance_eval 也是一种元编程，表示以当前实例为上下文，执行闭包，具体用途可以参考这篇文章: &lt;a href=&quot;https://4loc.wordpress.com/2009/05/29/eval-module_eval-and-instance_eval/&quot;&gt;Eval, module_eval, and instance_eval&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 18 Oct 2016 20:48:52 +0800</pubDate>
        <link>http://localhost:4000/2016/10/ruby-metaprogramming/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/10/ruby-metaprogramming/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
