<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fanyer</title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 05 Jun 2017 05:43:04 +0800</pubDate>
    <lastBuildDate>Mon, 05 Jun 2017 05:43:04 +0800</lastBuildDate>
    <generator>Jekyll v3.4.0</generator>
    
      <item>
        <title>Mybatis explore for taste</title>
        <description>&lt;p&gt;数据库连接池使用的是Druid。Mybatis与spring-boot的集成与mybatis与Spring的集成并没有什么不同的地方。&lt;/p&gt;

&lt;p&gt;可以看这里：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/slowlizard&quot;&gt;demo&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;多了一个&lt;code class=&quot;highlighter-rouge&quot;&gt;@ImportResource(&quot;mybatis.xml&quot;)&lt;/code&gt;注解。
如果要引用多个配置，那么就需要自定义配置的引入方式。不然每一个都要去&lt;code class=&quot;highlighter-rouge&quot;&gt;@ImportResource&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 29 May 2017 20:58:15 +0800</pubDate>
        <link>http://localhost:4000/2017/05/mybatis/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/05/mybatis/</guid>
        
        <category>java</category>
        
        
      </item>
    
      <item>
        <title>NAPI</title>
        <description>&lt;p&gt;Node 7.9之后, C++ Addon有了优雅的写法，需要参考Nan项目,研究了之后发现这也是给写过C++ Addon的人提高效率的，有较多的既定规则，且需要对v8有一定理解。&lt;/p&gt;

&lt;p&gt;新泽西学院有教授即时跟进布道。&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Apr 2017 13:48:52 +0800</pubDate>
        <link>http://localhost:4000/2017/04/NAPI-node/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/NAPI-node/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>caddy ace</title>
        <description>&lt;p&gt;看了10天的golang， 写了一些东西，参考tj的n写了gvm环境版本控制，不过是用shell写的。&lt;/p&gt;

&lt;p&gt;今天在migrate模版引擎的时候， 之前是用martini+ ace 写的站点，看到了一个封装很规范的go服务器caddy, 所以想要migrate,顺手试了一下给caddy写扩展，项目&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/fanyer/caddy-ace&quot;&gt;caddy-ace&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Apr 2017 13:48:52 +0800</pubDate>
        <link>http://localhost:4000/2017/04/caddy-ace/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/04/caddy-ace/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Tree Shaking</title>
        <description>&lt;p&gt;Rich Harris 的模块打包器 Rollup 普及了 JavaScript 圈内一个重要的特性：Tree-shaking，即从模块包中排除未使用的 exports 项。Rollup 基于 ES6 模块的静态结构（引入和导出不会在运行时改变）来检测哪一个模块没有被使用。&lt;/p&gt;

&lt;p&gt;Webpack 的 Tree-shaking 特性目前正在 beta 阶段，这篇博文解释了它是如何工作的，相关的项目代码可以在 Github 上查看：&lt;a href=&quot;https://github.com/rauschma/tree-shaking-demo&quot;&gt;Tree-shaking Demo&lt;/a&gt;。&lt;/p&gt;

&lt;h3 id=&quot;1-webpack-2-如何消除未使用的导出&quot;&gt;1. Webpack 2 如何消除未使用的导出&lt;/h3&gt;

&lt;p&gt;Webpack 2 是一个尚处于 beta 阶段的新版本，它通过下面两个步骤来消除未使用的导出:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;首先，所有 ES6 模块文件会被合并为一个打包文件。在这个文件中在任何地方都没有被引入的导出将不再会被打包（译注：&lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 语句将会直接被删除）。
其次，通过消除不可到达的代码，将打包文件精简。因此，那些既没有被导出，又没有在其模块中被使用的代码将不会出现在精简的打包文件中。如果没有第一个步骤，那些被导出的不可到达代码永远不会被删除（&lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 关键字会访问他们）。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;只有模块系统拥有一个静态的结构时，模块加载器才能在构建阶段对没有使用过的 &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 语句进行可靠的检测。因此，Webpack 2 可以解析并且理解所有 ES6 代码，并且仅对检测到的 ES6 模块进行 Tree-shaking。但不管怎样，只有 &lt;code class=&quot;highlighter-rouge&quot;&gt;import&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;export&lt;/code&gt; 语句会被 Webpack 转译为 ES5，如果希望所有代码都转译为 ES5，你仍然需要一个转译器对剩余部分的代码进行转译。在这篇博文中，我们会使用 Babel 6。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;2-输入es6-代码&quot;&gt;2. 输入：ES6 代码&lt;/h3&gt;

&lt;p&gt;Demo 项目有两个 ES6 模块。&lt;/p&gt;

&lt;p&gt;helpers.js 包含辅助函数：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// helpers.js
export function foo() {
  return 'foo';
}
export function bar() {
  return 'bar';
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;main.js，web 应用的入口：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// main.js
import { foo } from './helpers';

let elem = document.getElementById('output');
elem.innerHTML = `Output: ${foo()}`;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;需要注意的是在 helpers 模块中导出的 bar 在整个项目的任何地方都没有被使用过。&lt;/p&gt;

&lt;h3 id=&quot;3-不使用-tree-shaking-的输出&quot;&gt;3. 不使用 Tree-shaking 的输出&lt;/h3&gt;

&lt;p&gt;Babel 6 的典型选择是使用 es2015 这个 preset：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;presets:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;['es2015'],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;不管怎样，这一 preset 包含了 transform-es2015-modules-commonjs 这个插件，这意味着 Babel 会输出 CommonJS 规范的模块，这时 Webpack 无法进行 Tree-shaking：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function(module, exports) {

  'use strict';

  Object.defineProperty(exports, &quot;__esModule&quot;, {
    value: true
  });
  exports.foo = foo;
  exports.bar = bar;
  function foo() {
    return 'foo';
  }
  function bar() {
    return 'bar';
  }

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;你可以看到在代码精简的过程中，&lt;code class=&quot;highlighter-rouge&quot;&gt;bar&lt;/code&gt; 作为导出的一部分使它不能被识别为不可访问的代码。&lt;/p&gt;

&lt;h3 id=&quot;4-使用-tree-shaking-的输出&quot;&gt;4. 使用 Tree-shaking 的输出&lt;/h3&gt;

&lt;p&gt;我们需要的是 Babel 的 es2015，并不需要其中的 transform-es2015-modules-commonjs 插件。这时，实现以上需求的唯一途径是在配置中声明除 transform-es2015-modules-commonjs 以外的所有的插件。preset 的源代码托管在 Gibhub 上，所以我们这里复制粘贴需要的插件：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;plugins:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-template-literals',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-literals',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-function-name',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-arrow-functions',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-block-scoped-functions',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-classes',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-object-super',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-shorthand-properties',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-computed-properties',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-for-of',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-sticky-regex',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-unicode-regex',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'check-es2015-constants',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-spread',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-parameters',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-destructuring',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-block-scoping',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'transform-es2015-typeof-symbol',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;['transform-regenerator',&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;async:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;false,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;asyncGenerators:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果现在我们构建这个项目，helper 模块在打包文件中看起来就像这样：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function(module, exports, __webpack_require__) {

  /* harmony export */ exports[&quot;foo&quot;] = foo;
  /* unused harmony export bar */;

  function foo() {
      return 'foo';
  }
  function bar() {
      return 'bar';
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;现在，只有 foo 被导出了，但 bar 的代码仍然存在。经过代码精简，helpers 看起来就像这样：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function (t, n, r) {
  function e() {
      return &quot;foo&quot;
  }

  n.foo = e
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Thu, 23 Mar 2017 23:48:52 +0800</pubDate>
        <link>http://localhost:4000/2017/03/TreeShaking/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/03/TreeShaking/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Go 里的 make 和 new 两个函数，how to use？</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;注：该文作者是 &lt;a href=&quot;http://dave.cheney.net/&quot;&gt;Dave Cheney&lt;/a&gt;，原文地址 &lt;a href=&quot;http://dave.cheney.net/2014/08/17/go-has-both-make-and-new-functions-what-gives&quot;&gt;Go has both make and new functions, what gives ?&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇博客主要是讨论 Go 的内建函数 &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;如 Rob Pike 在今年的 Gophercon 上提到的，Go 有多种方式初始化变量。其中之一的能力就是获取一个 struct literal 的地址，这导致了几种方式做同样的事情。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s := &amp;amp;SomeStruct{}
v := SomeStruct{}
s := &amp;amp;v              // identical
s := new(SomeStruct) // also identical
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;评论家指出，这种语言中的冗余是公平的，这有时会导致他们寻找其他的矛盾， &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 之间的冗余最明显。&lt;/p&gt;

&lt;p&gt;表面上 &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 做着相同的事情，那究竟是什么原因两个都有呢？&lt;/p&gt;

&lt;h2 id=&quot;为什么不可以使用-make-做一切事情&quot;&gt;为什么不可以使用 make 做一切事情？&lt;/h2&gt;

&lt;p&gt;Go 没有用户定义的泛型，但是它有一些内建的类型，可以操作如通用的  lists，maps， sets， 和 queues；  slices， maps 和 channels。&lt;/p&gt;

&lt;p&gt;因为 &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 是被设计成创建这三个内建的泛型，它必须由运行时提供，因为在 Go 中没有办法直接表达 &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 的函数签名。&lt;/p&gt;

&lt;p&gt;尽管 &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 创建了通用的  slice，map， 和 channel 值，他们依然只是常规的值；&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 不会返回指针类型的值。&lt;/p&gt;

&lt;p&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 被移除了，支持 &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt;，你将如何构建一个指针初始化值。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var x1 *int
var x2 = new(int)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;x1 和 x2 有相同的类型，*int， x2 指向初始化的内存并且可以安全的解除引用。对于 x1 ，同样不是真的。&lt;/p&gt;

&lt;h2 id=&quot;为什么不可以使用-new-做一切事情&quot;&gt;为什么不可以使用 new 做一切事情？&lt;/h2&gt;

&lt;p&gt;尽管 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 的使用是稀少的，其行为是指定好的。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new(T)&lt;/code&gt; 一直返回一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;*T&lt;/code&gt; 指向一个初始化的 &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt;，正如 Go 没有构造器，这值将被初始化成 &lt;code class=&quot;highlighter-rouge&quot;&gt;T&lt;/code&gt; 的 &lt;a href=&quot;http://dave.cheney.net/2013/01/19/what-is-the-zero-value-and-why-is-it-useful&quot;&gt;zero value&lt;/a&gt;（讲解了为什么值是零，以及它为什么有用）。&lt;/p&gt;

&lt;p&gt;使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 来构造一个指向一个 slice，map，或是 channel zero 值的指针并和 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 的行为一致。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;s := new([]string)
fmt.Println(len(*s))  // 0
fmt.Println(*s == nil) // true

m := new(map[string]int)
fmt.Println(m == nil) // false
fmt.Println(*m == nil) // true

c := new(chan int)
fmt.Println(c == nil) // false
fmt.Println(*c == nil) // true
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;确实但这些只是规则我们可以改变它们对吧&quot;&gt;确实，但这些只是规则，我们可以改变它们，对吧？&lt;/h2&gt;

&lt;p&gt;它们可能会导致混乱，&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 是一致的；&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 仅仅 make slices， maps， 和 channels，&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 仅仅返回初始化内存的指针。&lt;/p&gt;

&lt;p&gt;是的， &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 可以被扩展成像 &lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 样操作 slices， maps 和 channels，但这将会导致它自己的不一致性。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 将有特殊的表现，如果传递给 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 的类型是 slices， maps 和 channels。这是每一个 Go 程序员应该记得的。&lt;/li&gt;
  &lt;li&gt;对于 slices 和 channels，&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 将变成可变参数，采取可能的长度，buffer size 或是 capacity。在比较特殊的情况下一定要记住，然后之前 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 只有一个参数，一个类型。&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 一直返回一个 *T 的 T 传递给它，这意味着像代码：&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;func Read(buf []byte) []byte
// assume new takes an optional length
buf := Read(new([]byte, 4096))
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;

    &lt;p&gt;需要语法更特殊的情况下允许 *new([]byte, length) 将变得不再可能。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;make&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 做不同的事情。&lt;/p&gt;

&lt;p&gt;如果你从其他语言转移过来，特别是有构造器的语言，那 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt; 应该就是你需要的。但是 Go 不是这些语言，它没有构造器。&lt;/p&gt;

&lt;p&gt;我的建议的谨慎的使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;。几乎总是有更容易和更清洁的方式来&lt;a href=&quot;http://dave.cheney.net/2014/05/24/on-declaring-variables&quot;&gt;写你的程序&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;作为一个代码评审者，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;new&lt;/code&gt;，就像使用命名返回参数，这是一个信号，表明代码正在尝试更聪明的做一些事情，我需要特别注意。可能是代码真的是聪明,但更有可能，它可以被更清晰和更地道的重写。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;涉及的文章&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;http://dave.cheney.net/2013/01/19/what-is-the-zero-value-and-why-is-it-useful&quot;&gt;What is the zero value, and why is it useful ?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dave.cheney.net/2014/03/25/the-empty-struct&quot;&gt;The empty struct&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dave.cheney.net/2014/03/17/pointers-in-go&quot;&gt;Pointers in Go&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://dave.cheney.net/2014/03/19/channel-axioms&quot;&gt;Channel Axioms&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Wed, 07 Sep 2016 23:48:52 +0800</pubDate>
        <link>http://localhost:4000/2016/09/go-make-new/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/09/go-make-new/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>发布brew个人包</title>
        <description>&lt;p&gt;Mac上的包管理工具，一般都推荐使用homebrew。homebrew开源在github上，其中formula文件夹为brew收录的所有包，目前大概是4000个。&lt;/p&gt;

&lt;p&gt;但是个人制作的小软件不会被官方仓库的formula收录，homebrew官方留出了tap命令使得我们可以将homebrew-core部署到自己的仓库,这样就可以用brew安装我们指定路径下的可执行文件，并将其安装到/usr/lcoal/bin目录下&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Aug 2016 21:48:52 +0800</pubDate>
        <link>http://localhost:4000/2016/08/brew-tap/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/08/brew-tap/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>commonjs异步模块</title>
        <description>&lt;p&gt;如何包装基础性的异步模块，有几种方案：&lt;/p&gt;

&lt;h3 id=&quot;1包装到对象属性上&quot;&gt;1.包装到对象属性上&lt;/h3&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var Wrapper = function(){
  this.foo = &quot;bar&quot;;
  this.init();
};
Wrapper.prototype.init = function(){
  var wrapper = this;  
  async.function(function(response) {
    wrapper.foo = &quot;foobar&quot;;
  });
}
module.exports = new Wrapper();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;2promise&quot;&gt;2.Promise&lt;/h3&gt;
&lt;p&gt;按规范来import和export即可&lt;/p&gt;

&lt;h2 id=&quot;3-mq&quot;&gt;3. MQ&lt;/h2&gt;
&lt;p&gt;用zeroMQ之类的进行队列投递&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Jul 2016 13:48:52 +0800</pubDate>
        <link>http://localhost:4000/2016/07/AsyncModule-in-Node/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/07/AsyncModule-in-Node/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>某段ruby元编程</title>
        <description>&lt;p&gt;可以用irb（Ruby的REPL程序）实际运行：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class A
  [:scope, :show_snippets, :search_results, :search_objects].each do |name|
    define_method name do
      search
      instance_variable_get &quot;@#{name}&quot;
    end
  end

  def search
    return if @searched
    @scope, @show_snippets, @search_results, @search_objects = 1,2,3,4
    @searched = true
  end

  def call(*attrs)
    attrs.map { |a| send a}
  end
end

a = A.new
[a.scope, a.show_snippets, a.search_results, a.search_objects] # [1, 2, 3, 4]
a.(:scope, :show_snippets, :search_results, :search_objects) # [1, 2, 3, 4]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;解释一下：&lt;/p&gt;

&lt;p&gt;对给定的4个属性名定义相应的getter，并且在获得属性前要先执行幂等的search方法来生成属性值。define_method接受方法名和代码块来定义方法，instance_variable_get根据名字获取对象的成员变量。
定义一个call方法来支持a.(:attr1, :attr2)这种批调用语法。对*attrs每个属性名a调用send a，相当于把方法名发送给对象(send是任何对象都拥有的方法)，让它执行。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;等价的普通Ruby代码如下：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class A
  def scope
    search
    @scope
  end

  def show_snippets
    search
    @show_snippets
  end

  def search_results
    search
    @search_results
  end

  def search_objects
    search
    @search_objects
  end

  def search
    return if @searched
    @scope, @show_snippets, @search_results, @search_objects = 1,2,3,4
    @searched = true
  end
end

a = A.new
[a.scope, a.show_snippets, a.search_results, a.search_objects]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sun, 10 Jul 2016 22:48:52 +0800</pubDate>
        <link>http://localhost:4000/2016/07/metaprograming-in-ruby/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/07/metaprograming-in-ruby/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Ruby 使用 Fiddle 调用 C 函数</title>
        <description>&lt;p&gt;写一个c函数&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// split.c

double split(double num)
{
  double ret = 0;
  ret = num / 2;
  return ret;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;编译成动态库&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gcc -o libsplit.so -shared split.c
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;在 split.rb 里调用 libsplit.so 里的 split 函数&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;require 'fiddle'

# Open the file
libsplit = Fiddle.dlopen('./libsplit.so')

# Load the `split` function
split = Fiddle::Function.new(
    libsplit['split'],
    [Fiddle::TYPE_DOUBLE],
    Fiddle::TYPE_DOUBLE
)

# Call the `split` function
puts split.call(10) # =&amp;gt; 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;Fiddle.dlopen，与c中调用动态链接库方法名相同dlopen&lt;/li&gt;
  &lt;li&gt;Fiddle::Function.new 参数为 函数名，参数，返回值&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;还可以通过 Fiddle::Importer mixin提供的DSL&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;module Test
  extend Fiddle::Importer
  dlload './libsplit.so'
  extern 'double split(double)'
end
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;puts Test.split(10) # =&amp;gt; 5&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jun 2016 21:38:55 +0800</pubDate>
        <link>http://localhost:4000/2016/06/ruby-invoke-C/</link>
        <guid isPermaLink="true">http://localhost:4000/2016/06/ruby-invoke-C/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>es6 迭代器</title>
        <description>&lt;h2 id=&quot;the-iterable-protocol&quot;&gt;The iterable protocol&lt;/h2&gt;

&lt;p&gt;The iterable protocol allows JavaScript objects to define or customize their iteration behavior, such as what values are looped over in a for..of construct. Some built-in types are built-in iterables with a default iteration behavior, such as Array or Map, while other types (such as Object) are not.&lt;/p&gt;

&lt;p&gt;In order to be iterable, an object must implement the @@iterator method, meaning that the object (or one of the objects up its prototype chain) must have a property with a @@iterator key which is available via constant Symbol.iterator:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Property&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;Value&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;[Symbol.iterator]&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;A zero arguments function that returns an object, conforming to the iterator protocol.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;the-iterator-protocol&quot;&gt;The iterator protocol&lt;/h2&gt;
&lt;p&gt;The iterator protocol defines a standard way to produce a sequence of values (either finite or infinite).&lt;/p&gt;

&lt;p&gt;An object is an iterator when it implements a next() method with the following semantics:&lt;/p&gt;
</description>
        <pubDate>Tue, 03 Nov 2015 13:48:52 +0800</pubDate>
        <link>http://localhost:4000/2015/11/iterator/</link>
        <guid isPermaLink="true">http://localhost:4000/2015/11/iterator/</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
